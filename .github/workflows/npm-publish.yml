name: deploy next to ncloud

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
    
jobs:
  # 로컬 머신에서 빌드된 Docker 이미지를 NCP 컨테이너 레지스트리로 푸시(push)하는 역할 
  push_to_registry:
    name: Push to ncp container registry
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
#         NCP 컨테이너 레지스트리에 로그인합니다. docker/login-action@v2 액션을 사용하여 Docker 레지스트리에 대한 인증 정보를 제공합니다.
      - name: Login to NCP Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.NCP_CONTAINER_REGISTRY }}
          username: ${{ secrets.NCP_ACCESS_KEY_ID }}
          password: ${{ secrets.NCP_SECRET_ACCESS_KEY }}
#         Docker 이미지를 빌드하고, 태그를 지정하여 NCP 컨테이너 레지스트리로 푸시(push)합니다. docker/build-push-action@v3 액션을 사용하여 빌드 및 푸시 작업을 수행합니다.
      - name: build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: docker/prod.Dockerfile
          push: true
          tags: ${{ secrets.NCP_CONTAINER_REGISTRY }}/nextjs-docker:latest
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.GIT_TOKEN }}
            
  # 타겟 서버와 연동하기
  # NCP 컨테이너 레지스트리에서 이미지를 가져와서 원격 서버에서 실행하는 역할
  pull_from_registry:
    name: Connect server ssh and pull from container registry
    needs: push_to_registry
    runs-on: ubuntu-latest
    steps:
      # SSH를 사용하여 원격 서버에 연결합니다. appleboy/ssh-action@master 액션을 사용하여 SSH 연결을 설정합니다.
      - name: connect ssh
        uses: appleboy/ssh-action@master
        with:
          host: 175.45.205.218
          username: cuQAyHZFCc9MYauWxNy9
          password: 3t9XiugniEp5FhJH9liKnzu41QGVbUxroIXXs2db
          port: 22
          script: |
            docker pull test-check-u-registry.kr.ncr.ntruss.com/nextjs-docker:latest
            docker stop $(docker ps -a -q)
            docker rm $(docker ps -a -q)
            docker run -d -p 80:3000 --name nextjs-docker test-check-u-registry.kr.ncr.ntruss.com/nextjs-docker:latest
            docker image prune -f
          
